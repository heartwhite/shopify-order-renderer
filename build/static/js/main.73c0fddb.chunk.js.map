{"version":3,"sources":["components/VendorCard.js","Renderer.js","App.js","serviceWorker.js","index.js"],"names":["v","getCsvFile","download","own","name","key","className","amountToBePaid","soldItems","href","url","onClick","useState","selectedFile","setSelectedFile","vendors","setVendors","setDownload","generalCSV","setGeneralCSV","getFormattedDate","fullDate","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","roundNumber","num","Number","toFixed","calculateTotals","totalGross","totalToPay","totalRood15","vendor","totalSold","forEach","i","amount","price","quantity","itemCount","grossSale","orderPlacedAt","rood15","percentage","takePercentage","push","dataArray","a","axios","post","data","startDate","endDate","newArr","map","item","replace","period","Payout","Roodkappje","console","log","type","accept","id","onChange","e","target","files","fileReader","FileReader","readAsBinaryString","onload","clearData","shippingFees","fulfilledAt","order","orderNr","vendorModal","fulfillment","shipping","orderDate","itemFulfillment","fulfillDate","orderFulfilledAt","Tip","Shipping","filterAndGroupVendors","p","paidDate","Name","Vendor","sanitiseData","csv","lines","split","result","headers","length","obj","currentline","j","parseCSVFile","vendorsArr","getGeneralCsvFile","VendorCard","App","Renderer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73c0fddb.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ v, getCsvFile, download }) => {\n  let own = false;\n  if (v.name === 'Same Day Delivery' || v.name === 'Tip' || v.name === 'Shipping') {\n    own = true;\n  }\n  return (\n    <div key={v.name} className={`vendor-card ${own && 'own'}`}>\n      <div>\n        <label>{v.name} :</label>\n        <p> {v.amountToBePaid}</p>\n      </div>\n      {v.soldItems && (\n        <div>\n          {download.name === v.name ? (\n            <button>\n              <a href={download.url}>Download Csv</a>\n            </button>\n          ) : (\n            <button onClick={() => getCsvFile(v.soldItems, v.name)}>\n              {' '}\n              <p>{v.name}.csv</p>\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport VendorCard from './components/VendorCard';\n\nexport default () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [vendors, setVendors] = useState({ vendors: [] });\n  const [download, setDownload] = useState(false);\n  const [generalCSV, setGeneralCSV] = useState(null);\n\n  function getFile(e) {\n    setSelectedFile(e.target.files[0]);\n  }\n\n  function parseCSVFile(csv) {\n    const lines = csv.split('\\n');\n\n    const result = [];\n\n    const headers = lines[0].split(',');\n\n    for (var i = 1; i < lines.length; i++) {\n      const obj = {};\n\n      const currentline = lines[i].split(',');\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n    return result; //JavaScript object\n    // return JSON.stringify(result); //JSON\n  }\n\n  function sanitiseData(data) {\n    return data.map((p) => {\n      return {\n        name: p['Lineitem name'],\n        price: Number(p['Lineitem price']),\n        quantity: Number(p['Lineitem quantity']),\n        fulfillDate: p['Fulfilled at'],\n        orderDate: p['Created at'],\n        paidDate: p['Paid at'],\n        orderNr: p.Name,\n        vendor: p.Vendor,\n        itemFulfillment: p['Lineitem fulfillment status'],\n        fulfillment: p['Fulfillment Status'],\n        shipping: p.Shipping,\n      };\n    });\n  }\n\n  function filterAndGroupVendors(clearData) {\n    let vendors = {};\n    let shippingFees = {\n      name: 'Shipping',\n      grossSale: 0,\n      rood15: 0,\n      amountToBePaid: 0,\n      soldItems: [],\n    };\n    let fulfilledAt = null;\n\n    clearData.forEach((e) => {\n      const order = e.orderNr;\n      const vendorModal = {\n        name: e.vendor,\n        soldItems: [],\n        itemCount: 0,\n        grossSale: 0,\n        amountToBePaid: 0,\n        rood15: 0,\n      };\n      if (e.fulfillment === 'fulfilled' && e.shipping !== '0') {\n        shippingFees.soldItems.push({\n          orderNr: order,\n          price: Number(e.shipping),\n          quantity: 1,\n          orderPlacedAt: e.orderDate,\n        });\n      }\n      if (e.itemFulfillment === 'fulfilled') {\n        if (e.fulfillment) {\n          fulfilledAt = e.fulfillDate;\n        }\n\n        if (e.vendor) {\n          if (!vendors[e.vendor]) {\n            if (e.vendor === 'Tip Jar') {\n              vendors[e.vendor] = { ...vendorModal, name: 'Same Day Delivery' };\n            } else {\n              vendors[e.vendor] = vendorModal;\n            }\n          }\n          vendors[e.vendor].soldItems.push({\n            name: e.name.replace('@#@', '-'),\n            price: e.price,\n            quantity: e.quantity,\n            orderNr: e.orderNr,\n            orderPlacedAt: getFormattedDate(e.orderDate),\n            orderFulfilledAt: getFormattedDate(fulfilledAt),\n          });\n        }\n      } else if (e.name === 'Tip') {\n        if (!vendors.Tip) {\n          vendors.Tip = { ...vendorModal, name: 'Tip' };\n        }\n        vendors.Tip.soldItems.push({\n          name: e.name.replace('@#@', '-'),\n          price: e.price,\n          quantity: e.quantity,\n          orderNr: e.orderNr,\n          orderPlacedAt: getFormattedDate(e.orderDate),\n        });\n      }\n    });\n    vendors.Shipping = shippingFees;\n    return vendors;\n  }\n\n  function getFormattedDate(fullDate) {\n    var date = new Date(fullDate);\n    var dd = date.getDate();\n\n    var mm = date.getMonth() + 1;\n    var yyyy = date.getFullYear();\n    if (dd < 10) {\n      dd = '0' + dd;\n    }\n\n    if (mm < 10) {\n      mm = '0' + mm;\n    }\n\n    date = mm + '/' + dd + '/' + yyyy;\n    return date;\n  }\n\n  function takePercentage(amount, percentage) {\n    return Number(((amount / 100) * percentage).toFixed(2));\n  }\n  function roundNumber(num) {\n    return Number(num.toFixed(2));\n  }\n\n  function calculateTotals(vendors) {\n    let totalGross = 0;\n    let totalToPay = 0;\n    let totalRood15 = 0;\n    for (let vendor in vendors) {\n      let totalSold = 0;\n\n      vendors[vendor].soldItems.forEach((i) => {\n        let amount = i.price * i.quantity;\n        vendors[vendor].itemCount += i.quantity;\n        totalSold += amount;\n        vendors[vendor].grossSale += amount;\n        if (\n          vendor !== 'Tip Jar' &&\n          vendor !== 'Tip' &&\n          getFormattedDate(i.orderPlacedAt) < getFormattedDate('2020-06-08 00:00:01 +0200')\n        ) {\n          let rood15 = takePercentage(amount, 15);\n          i.rood15 = rood15;\n          vendors[vendor].amountToBePaid += amount - rood15;\n          vendors[vendor].rood15 += rood15;\n        } else {\n          vendors[vendor].amountToBePaid += amount;\n        }\n      });\n      vendors[vendor].grossSale = roundNumber(vendors[vendor].grossSale);\n      vendors[vendor].amountToBePaid = roundNumber(vendors[vendor].amountToBePaid);\n      vendors[vendor].rood15 = roundNumber(vendors[vendor].rood15);\n      vendors[vendor].soldItems.push({\n        name: 'TOTAL',\n        price: roundNumber(totalSold),\n        rood15: vendors[vendor].rood15,\n      });\n\n      if (vendor !== 'Tip Jar') {\n        totalToPay += vendors[vendor].amountToBePaid;\n      }\n      totalGross += vendors[vendor].grossSale;\n      totalRood15 += vendors[vendor].rood15;\n    }\n    vendors.totalGross = roundNumber(totalGross);\n\n    vendors.totalToPay = roundNumber(totalToPay);\n    vendors.totalRood15 = roundNumber(totalRood15);\n\n    return vendors;\n  }\n\n  async function getCsvFile(dataArray, name) {\n    const res = await axios.post('http://localhost:3000/upload', { dataArray, name });\n    if (res.data === 'it is ok') {\n      setDownload({ name, url: `http://localhost:3000/${name}.csv` });\n    }\n  }\n\n  async function getGeneralCsvFile(dataArray) {\n    let name;\n    let startDate = getFormattedDate(dataArray[0].soldItems[0].orderPlacedAt);\n    let endDate = getFormattedDate(dataArray[0].soldItems[0].orderPlacedAt);\n    const newArr = dataArray.map((vendor) => {\n      if (vendor.soldItems && vendor.name !== 'Tip Jar') {\n        vendor.soldItems.forEach((item) => {\n          if (item.quantity) {\n            if (getFormattedDate(item.orderPlacedAt) > endDate) {\n              endDate = getFormattedDate(item.orderPlacedAt);\n            } else if (getFormattedDate(item.orderPlacedAt) < startDate) {\n              startDate = getFormattedDate(item.orderPlacedAt);\n            }\n          }\n        });\n\n        name = `${startDate.replace(/\\//g, '')}-${endDate.replace(/\\//g, '')}generalCSV`;\n        return {\n          name: vendor.name,\n          period: `${startDate}-${endDate}`,\n          'Total Quantity': vendor.itemCount,\n          'Gross Sale': vendor.grossSale,\n          Payout: vendor.amountToBePaid,\n          Roodkappje: vendor.rood15,\n        };\n      } else {\n        console.log('this is a problem with general csv preparing function');\n        return null;\n      }\n    });\n    setGeneralCSV(name);\n\n    getCsvFile(newArr, name);\n  }\n\n  function onShowClick() {\n    if (selectedFile) {\n      let fileReader = new FileReader();\n      fileReader.readAsBinaryString(selectedFile);\n\n      fileReader.onload = (e) => {\n        let data = e.target.result;\n\n        const dataObjType = parseCSVFile(data);\n        const clearData = sanitiseData(dataObjType);\n\n        let vendors = filterAndGroupVendors(clearData);\n        vendors = calculateTotals(vendors);\n        const vendorsArr = [];\n        for (let i in vendors) {\n          if (i !== 'totalGross' && i !== 'totalToPay' && i !== 'totalRood15') {\n            vendorsArr.push(vendors[i]);\n          }\n        }\n\n        vendors = {\n          vendors: vendorsArr,\n          totalGross: vendors.totalGross,\n          totalToPay: vendors.totalToPay,\n          totalRood15: vendors.totalRood15,\n        };\n        setVendors(vendors);\n      };\n    }\n  }\n\n  return (\n    <div className='dropField'>\n      <div className='upload-section'>\n        <h4>Upload orders CSV</h4>\n        <div className='upload-input'>\n          <input type='file' accept='.csv' id='fileInput' onChange={getFile} />\n          <button onClick={onShowClick}>Show Results</button>\n          {vendors.vendors[0] &&\n            (download.name !== generalCSV ? (\n              <button onClick={() => getGeneralCsvFile(vendors.vendors)}>\n                Prepare Vendors CSV\n              </button>\n            ) : (\n              <a href={download.url}>Download Csv</a>\n            ))}\n        </div>\n      </div>\n      <div className='vendor-card-container'>\n        {vendors.vendors[0] &&\n          vendors.vendors.map((v) => (\n            <VendorCard key={v.name} v={v} getCsvFile={getCsvFile} download={download} />\n          ))}\n      </div>\n\n      <div className='csv'></div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport Renderer from './Renderer';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>Shopify Orders Export Renderer</header>\n      <Renderer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}