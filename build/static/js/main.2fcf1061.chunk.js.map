{"version":3,"sources":["components/VendorCard.js","components/Orders.js","App.js","serviceWorker.js","index.js"],"names":["v","getCsvFile","download","own","name","key","className","amountToBePaid","soldItems","href","url","onClick","useState","startDate","setStartDate","endDate","setEndDate","dateChange","setDateChange","localStorage","getItem","apiKey","setApiKey","apiPassword","setApiPassword","shopName","setShopName","orders","setOrders","vendors","setVendors","setDownload","generalCSV","setGeneralCSV","PostBody","password","a","axios","post","res","data","handelLoginInputChange","e","target","id","value","setItem","getFormattedDate","fullDate","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","roundNumber","num","Number","toFixed","calculateTotals","totalGross","totalToPay","totalRood15","vendor","totalSold","forEach","i","amount","price","quantity","itemCount","grossSale","orderPlacedAt","slice","rood15","percentage","takePercentage","push","dataArray","newArr","map","item","replace","period","Payout","Roodkappje","console","log","htmlFor","type","placeholder","onChange","clear","getGeneralCsvFile","clearData","shippingFees","order","orderNr","vendorModal","orderFullfillment","shipping","orderDate","fulfillment_status","Tip","Shipping","filterAndGroupVendors","line_items","shipping_lines","discounted_price","product","created_at","sanitiseData","vendorsArr","VendorCard","App","Orders","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fcf1061.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ v, getCsvFile, download }) => {\n  let own = false;\n  if (v.name === 'Same Day Delivery' || v.name === 'Tip' || v.name === 'Shipping') {\n    own = true;\n  }\n  return (\n    <div key={v.name} className={`vendor-card ${own && 'own'}`}>\n      <div>\n        <label>{v.name} :</label>\n        <p> {v.amountToBePaid}</p>\n      </div>\n      {v.soldItems && (\n        <div>\n          {download.name === v.name ? (\n            <button>\n              <a href={download.url}>Download Csv</a>\n            </button>\n          ) : (\n            <button onClick={() => getCsvFile(v.soldItems, v.name)}>\n              {' '}\n              <p>{v.name}.csv</p>\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport VendorCard from './VendorCard';\n\nexport default () => {\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [dateChange, setDateChange] = useState(false);\n  const [apiKey, setApiKey] = useState(localStorage.getItem('shopify-api-password') || '');\n  const [apiPassword, setApiPassword] = useState(localStorage.getItem('shopify-api-key') || '');\n  const [shopName, setShopName] = useState(localStorage.getItem('shopify-shop-name') || '');\n  const [orders, setOrders] = useState([]);\n  const [vendors, setVendors] = useState({ vendors: [] });\n  const [download, setDownload] = useState(false);\n  const [generalCSV, setGeneralCSV] = useState(null);\n  const PostBody = {\n    shopName: shopName,\n    apiKey: apiKey,\n    password: apiPassword,\n    startDate: startDate,\n    endDate: endDate,\n  };\n  // React.useEffect(() => {\n  //   localStorage.setItem('shopify-api-password', apiPassword);\n  //   localStorage.setItem('shopify-api-key', apiKey);\n  //   localStorage.setItem('shopify-shop-name', shopName);\n  // }, [apiKey, apiPassword, shopName]);\n  async function getOrders() {\n    const res = await axios.post('http://localhost:8000/orders', PostBody);\n    setOrders(res.data);\n    setDateChange(false);\n  }\n  function clearLocalStorage() {\n    setApiPassword('');\n    setApiKey('');\n    setShopName('');\n    localStorage.clear();\n  }\n  function handelLoginInputChange(e) {\n    switch (e.target.id) {\n      case 'api-password':\n        setApiPassword(e.target.value);\n        localStorage.setItem('shopify-api-password', e.target.value);\n        break;\n      case 'api-key':\n        setApiKey(e.target.value);\n        localStorage.setItem('shopify-api-key', e.target.value);\n\n        break;\n      case 'shop-name':\n        setShopName(e.target.value);\n        localStorage.setItem('shopify-shop-name', e.target.value);\n\n        break;\n    }\n  }\n  function handelStartDateChange(e) {\n    setStartDate(e.target.value);\n    setDateChange(true);\n  }\n  function handelEndDateChange(e) {\n    setEndDate(e.target.value);\n    setDateChange(true);\n  }\n\n  function sanitiseData(orders) {\n    const soldItems = [];\n    orders.forEach((order) => {\n      order.line_items[0].shipping = order.shipping_lines[0].discounted_price;\n      order.line_items.forEach((product) => {\n        product.orderNr = order.name;\n        product.orderPlacedAt = order.created_at;\n        product.orderFullfillment = order.fulfillment_status;\n        soldItems.push(product);\n      });\n    });\n    return soldItems;\n  }\n  function filterAndGroupVendors(clearData) {\n    let vendors = {};\n    let shippingFees = {\n      name: 'Shipping',\n      grossSale: 0,\n      rood15: 0,\n      amountToBePaid: 0,\n      soldItems: [],\n    };\n\n    clearData.forEach((e) => {\n      const order = e.orderNr;\n      const vendorModal = {\n        name: e.vendor,\n        soldItems: [],\n        itemCount: 0,\n        grossSale: 0,\n        amountToBePaid: 0,\n        rood15: 0,\n      };\n      if (e.orderFullfillment === 'fulfilled' && e.shipping) {\n        shippingFees.soldItems.push({\n          orderNr: order,\n          price: Number(e.shipping),\n          quantity: 1,\n          orderPlacedAt: e.orderDate,\n        });\n      }\n      if (e.fulfillment_status === 'fulfilled') {\n        if (e.vendor) {\n          if (!vendors[e.vendor]) {\n            if (e.vendor === 'Tip Jar') {\n              vendors[e.vendor] = { ...vendorModal, name: 'Same Day Delivery' };\n            } else {\n              vendors[e.vendor] = vendorModal;\n            }\n          }\n          vendors[e.vendor].soldItems.push({\n            name: e.name,\n            price: e.price,\n            quantity: e.quantity,\n            orderNr: e.orderNr,\n            orderPlacedAt: e.orderPlacedAt,\n          });\n        }\n      } else if (e.name === 'Tip') {\n        if (!vendors.Tip) {\n          vendors.Tip = { ...vendorModal, name: 'Tip' };\n        }\n        vendors.Tip.soldItems.push({\n          name: e.name,\n          price: e.price,\n          quantity: e.quantity,\n          orderNr: e.orderNr,\n        });\n      }\n    });\n    vendors.Shipping = shippingFees;\n    return vendors;\n  }\n\n  function getFormattedDate(fullDate) {\n    var date = new Date(fullDate);\n    var dd = date.getDate();\n\n    var mm = date.getMonth() + 1;\n    var yyyy = date.getFullYear();\n    if (dd < 10) {\n      dd = '0' + dd;\n    }\n\n    if (mm < 10) {\n      mm = '0' + mm;\n    }\n\n    date = mm + '-' + dd + '-' + yyyy;\n    return date;\n  }\n\n  function takePercentage(amount, percentage) {\n    return Number(((amount / 100) * percentage).toFixed(2));\n  }\n  function roundNumber(num) {\n    return Number(num.toFixed(2));\n  }\n\n  function calculateTotals(vendors) {\n    let totalGross = 0;\n    let totalToPay = 0;\n    let totalRood15 = 0;\n    for (let vendor in vendors) {\n      let totalSold = 0;\n\n      vendors[vendor].soldItems.forEach((i) => {\n        let amount = i.price * i.quantity;\n        vendors[vendor].itemCount += i.quantity;\n        totalSold += amount;\n        vendors[vendor].grossSale += amount;\n        if (i.orderPlacedAt) {\n          i.orderPlacedAt = i.orderPlacedAt.slice(0, 10);\n        }\n        if (\n          vendor !== 'Tip Jar' &&\n          vendor !== 'Tip' &&\n          getFormattedDate(i.orderPlacedAt) < getFormattedDate('2020-06-08 00:00:01 +0200')\n        ) {\n          let rood15 = takePercentage(amount, 15);\n          i.rood15 = rood15;\n          vendors[vendor].amountToBePaid += amount - rood15;\n          vendors[vendor].rood15 += rood15;\n        } else {\n          vendors[vendor].amountToBePaid += amount;\n        }\n      });\n      vendors[vendor].grossSale = roundNumber(vendors[vendor].grossSale);\n      vendors[vendor].amountToBePaid = roundNumber(vendors[vendor].amountToBePaid);\n      vendors[vendor].rood15 = roundNumber(vendors[vendor].rood15);\n      vendors[vendor].soldItems.push({\n        name: 'TOTAL',\n        price: roundNumber(totalSold),\n        rood15: vendors[vendor].rood15,\n      });\n\n      if (vendor !== 'Tip Jar') {\n        totalToPay += vendors[vendor].amountToBePaid;\n      }\n      totalGross += vendors[vendor].grossSale;\n      totalRood15 += vendors[vendor].rood15;\n    }\n    vendors.totalGross = roundNumber(totalGross);\n\n    vendors.totalToPay = roundNumber(totalToPay);\n    vendors.totalRood15 = roundNumber(totalRood15);\n\n    return vendors;\n  }\n\n  async function getCsvFile(dataArray, name) {\n    const res = await axios.post('https://shopify-order-export-renderer.herokuapp.com/upload', {\n      dataArray,\n      name,\n    });\n    if (res.data === 'it is ok') {\n      setDownload({ name, url: `https://shopify-order-export-renderer.herokuapp.com/${name}.csv` });\n    }\n  }\n\n  async function getGeneralCsvFile(dataArray) {\n    let name;\n    let startDate = getFormattedDate(dataArray[0].soldItems[0].orderPlacedAt);\n    let endDate = getFormattedDate(dataArray[0].soldItems[0].orderPlacedAt);\n    const newArr = dataArray.map((vendor) => {\n      if (vendor.soldItems && vendor.name !== 'Tip Jar') {\n        vendor.soldItems.forEach((item) => {\n          if (item.quantity) {\n            if (getFormattedDate(item.orderPlacedAt) > endDate) {\n              endDate = getFormattedDate(item.orderPlacedAt);\n            } else if (getFormattedDate(item.orderPlacedAt) < startDate) {\n              startDate = getFormattedDate(item.orderPlacedAt);\n            }\n          }\n        });\n\n        name = `${startDate.replace(/\\//g, '')}-${endDate.replace(/\\//g, '')}generalCSV`;\n        return {\n          name: vendor.name,\n          period: `${startDate}-${endDate}`,\n          'Total Quantity': vendor.itemCount,\n          'Gross Sale': vendor.grossSale,\n          Payout: vendor.amountToBePaid,\n          Roodkappje: vendor.rood15,\n        };\n      } else {\n        console.log('this is a problem with general csv preparing function');\n        return null;\n      }\n    });\n    setGeneralCSV(name);\n\n    getCsvFile(newArr, name);\n  }\n  function onShowClick() {\n    if (orders[0]) {\n      const clearData = sanitiseData(orders);\n      let vendors = filterAndGroupVendors(clearData);\n      vendors = calculateTotals(vendors);\n      const vendorsArr = [];\n      for (let i in vendors) {\n        if (i !== 'totalGross' && i !== 'totalToPay' && i !== 'totalRood15') {\n          vendorsArr.push(vendors[i]);\n        }\n      }\n\n      vendors = {\n        vendors: vendorsArr,\n        totalGross: vendors.totalGross,\n        totalToPay: vendors.totalToPay,\n        totalRood15: vendors.totalRood15,\n      };\n      setVendors(vendors);\n    }\n  }\n  return (\n    <div>\n      <div className='dropField'>\n        <div className='upload-section'>\n          <div className='date-input'>\n            <section>\n              <label htmlFor='shop-name'>Shopify Store Name </label>\n              <input\n                type='text'\n                placeholder='your shop name'\n                id='shop-name'\n                onChange={handelLoginInputChange}\n                value={shopName}\n              />\n            </section>\n            <section>\n              <label htmlFor='api-key'>Private App API Key </label>\n              <input\n                type='text'\n                placeholder='API Key'\n                id='api-key'\n                onChange={handelLoginInputChange}\n                value={apiKey}\n              />\n            </section>\n            <section>\n              <label htmlFor='api-password'>Private App API Password </label>\n              <input\n                type='text'\n                placeholder='API Password'\n                // value={apiPassword}\n                id='api-password'\n                onChange={handelLoginInputChange}\n                value={apiPassword}\n              />\n            </section>\n          </div>\n          <button onClick={clearLocalStorage}>Delete credentials from local storage</button>\n        </div>\n        <div className='upload-section'>\n          <h4>Pick Date Range</h4>\n\n          <div className='date-input'>\n            <section>\n              <label htmlFor='start-date'>Start Date </label>\n              <input\n                type='datetime-local'\n                placeholder='--/--/2020, 00:00'\n                id='start-date'\n                name='ali'\n                onChange={handelStartDateChange}\n              />\n            </section>\n            <section>\n              <label htmlFor='end-date'>End Date </label>\n              <input\n                type='datetime-local'\n                placeholder='--/--/2020, 23:59'\n                id='end-date'\n                onChange={handelEndDateChange}\n              />\n            </section>\n\n            {vendors.vendors[0] &&\n              (download.name !== generalCSV ? (\n                <button onClick={() => getGeneralCsvFile(vendors.vendors)}>\n                  Prepare Vendors CSV\n                </button>\n              ) : (\n                <a href={download.url}>Download Csv</a>\n              ))}\n          </div>\n          <div className='upload-input'>\n            {!orders[0] || dateChange ? (\n              <button className='submit' onClick={getOrders}>\n                SUBMIT\n              </button>\n            ) : (\n              <button className='submit' onClick={onShowClick}>\n                Show Results\n              </button>\n            )}\n          </div>\n        </div>\n        <div className='vendor-card-container'>\n          {vendors.vendors[0] &&\n            vendors.vendors.map((v) => (\n              <VendorCard key={v.name} v={v} getCsvFile={getCsvFile} download={download} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport Renderer from './Renderer';\nimport Orders from './components/Orders';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>Shopify Vendors Payout</header>\n      {/* <Renderer /> */}\n      <Orders />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}